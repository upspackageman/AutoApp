services:
  angular:
    build:
      context: .
      dockerfile: dockerfile-client
    ports:
      - "8080:80"
    networks:
      - app-network
    depends_on:
      - api
    volumes:
      - ./angular:/app

  api:
    build:
      context: .  # Assuming you are running from the project root
      dockerfile: dockerfile-api
    container_name: api
    volumes:
      - ./API:/var/www/html  # Mount local PHP code for live development
    ports:
      - "8000:80"             # Expose port 8000 on host to port 80 in container
    depends_on:
      - mysql
    environment:
      MYSQL_ROOT_PASSWORD: WAwi5697
      # - MYSQL_USER=your_user
      # - MYSQL_PASSWORD=your_password
      # - MYSQL_ROOT_PASSWORD=root_password
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: WAwi5697
      # - MYSQL_USER=your_user
      # - MYSQL_PASSWORD=your_password
      # - MYSQL_ROOT_PASSWORD=root_password
    volumes:
      - ./mysql:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d  # Mount the SQL script directory
    ports:
      - "3306:3306"
    networks:
      - app-network
  
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: WAwi5697
    ports:
      - "8088:80"
    depends_on:
      - mysql
    networks:
      - app-network

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - "6379:6379"  # Expose Redis port 6379
    networks:
      - app-network
    command: ["redis-server", "--maxmemory", "256mb", "--maxmemory-policy", "allkeys-lru"]
  
networks:
  app-network:
    driver: bridge
